{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/akalandscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1640083605273},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1639578114769},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1639578114822},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1639578114774},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1639578114848},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1639578114880},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1639578114841},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1639578114881},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1639578114881},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1639578114883},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1639578114884},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1639578114885},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1639578114886},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1639578114886},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1639578114887},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1639578114888},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1639578114888},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1639578114889},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1639578114891},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1639578114785},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1639578114794},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1639578114788},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1639578114794},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639578114798},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1639578114801},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639578114797},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1639578114781},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1639578114819},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1639578114782},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1639578114786},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1639578114783},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1639578114790},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1639578114792},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1639578114791},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1639578114793},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1639578114795},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1639578114784},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1639578114793},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1639578114799},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1639578114788},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1639578114799},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1639578114801},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1639578114802},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1639578114839},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1639578114856},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1639578114868},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1639578114856},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1639578114807},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1639578114808},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1639578114853},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1639578114809},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1639578114853},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1639578114855},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1639578114780},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1639578114833},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1639578114835},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1639578114789},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1639578114787},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1639578114796},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1639578114791},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1639578114800},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1639578114803},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1639578114859},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1639578114860},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1639578114859},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1639578114863},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1639578114861},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1639578114864},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1639578114866},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1639578114865},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1639578114866},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1639578114867},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1639578114851},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1639578114862},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1639578114864},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1639578114806},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1639578114852},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1639578114876},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1639578114778},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1639578114829},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1639578114829},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1639578114779},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1639578114830},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1639578114874},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1639578114872},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1639578114815},{"_id":"themes/akalandscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1640083605274},{"_id":"themes/akalandscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1640083605274},{"_id":"themes/akalandscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1640083605283},{"_id":"themes/akalandscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1640083605275},{"_id":"themes/akalandscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1640083605283},{"_id":"themes/akalandscape/package.json","hash":"759a823b96379180be1080127c6e1d45308c64da","modified":1640083605300},{"_id":"themes/akalandscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1639578114788},{"_id":"themes/akalandscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1639578114785},{"_id":"themes/akalandscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1639578114794},{"_id":"themes/akalandscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1640083605297},{"_id":"themes/akalandscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639578114797},{"_id":"themes/akalandscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1639578114798},{"_id":"themes/akalandscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1639578114801},{"_id":"themes/akalandscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1640083605283},{"_id":"themes/akalandscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1640083605284},{"_id":"themes/akalandscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1640083605284},{"_id":"themes/akalandscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1640083605284},{"_id":"themes/akalandscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1640083605285},{"_id":"themes/akalandscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1640083605287},{"_id":"themes/akalandscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1640083605287},{"_id":"themes/akalandscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1640083605286},{"_id":"themes/akalandscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1640083605287},{"_id":"themes/akalandscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1640083605287},{"_id":"themes/akalandscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1640083605301},{"_id":"themes/akalandscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1640083605288},{"_id":"themes/akalandscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1640083605289},{"_id":"themes/akalandscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1640083605288},{"_id":"themes/akalandscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1640083605289},{"_id":"themes/akalandscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1640083605289},{"_id":"themes/akalandscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1640083605289},{"_id":"themes/akalandscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1640083605290},{"_id":"themes/akalandscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1640083605291},{"_id":"themes/akalandscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1640083605291},{"_id":"themes/akalandscape/layout/_partial/head.ejs","hash":"f03e8e3ababda6b651e9de36bf549d0c955245f6","modified":1640083605291},{"_id":"themes/akalandscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1640083605292},{"_id":"themes/akalandscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1640083605292},{"_id":"themes/akalandscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1640083605295},{"_id":"themes/akalandscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1640083605295},{"_id":"themes/akalandscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1640083605296},{"_id":"themes/akalandscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1640083605296},{"_id":"themes/akalandscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1640083605296},{"_id":"themes/akalandscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1640083605296},{"_id":"themes/akalandscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1640083605301},{"_id":"themes/akalandscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1640083605307},{"_id":"themes/akalandscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1640083605319},{"_id":"themes/akalandscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1639578114807},{"_id":"themes/akalandscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1639578114808},{"_id":"themes/akalandscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1639578114809},{"_id":"themes/akalandscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1639578114853},{"_id":"themes/akalandscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1639578114853},{"_id":"themes/akalandscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1639578114855},{"_id":"themes/akalandscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1640083605326},{"_id":"themes/akalandscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1640083605327},{"_id":"themes/akalandscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1640083605327},{"_id":"themes/akalandscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1640083605328},{"_id":"themes/akalandscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1640083605293},{"_id":"themes/akalandscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1640083605293},{"_id":"themes/akalandscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1640083605294},{"_id":"themes/akalandscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1640083605294},{"_id":"themes/akalandscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1640083605294},{"_id":"themes/akalandscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1640083605295},{"_id":"themes/akalandscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1640083605302},{"_id":"themes/akalandscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1640083605302},{"_id":"themes/akalandscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1640083605304},{"_id":"themes/akalandscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1640083605304},{"_id":"themes/akalandscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1640083605303},{"_id":"themes/akalandscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1640083605305},{"_id":"themes/akalandscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1640083605305},{"_id":"themes/akalandscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1640083605305},{"_id":"themes/akalandscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1640083605306},{"_id":"themes/akalandscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1640083605306},{"_id":"themes/akalandscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1640083605306},{"_id":"themes/akalandscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1639578114851},{"_id":"themes/akalandscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1640083605307},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1639578114806},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1639578114876},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1640083605324},{"_id":"themes/akalandscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1639578114852},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1640083605324},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1640083605325},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1640083605326},{"_id":"themes/akalandscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1640083605325},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1639578114874},{"_id":"themes/akalandscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1640083605315},{"_id":"themes/akalandscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1639578114815},{"_id":"source/_posts/NOTE-线性代数应该这样学-Linear-Algebra-Done-Right.md","hash":"17c0ab67d3ce2050ed8620ab1f933b2ad7d2fe16","modified":1640085669191},{"_id":"themes/akalandscape/package-lock.json","hash":"3ec416345101f0cfda9d77291726c49913bd3b17","modified":1640083605300},{"_id":"public/2021/12/21/NOTE-线性代数应该这样学-Linear-Algebra-Done-Right/index.html","hash":"91522213bff87ca5124d19bd8676e48211204b03","modified":1640079613597},{"_id":"public/2021/12/21/hello-world/index.html","hash":"adf6c6c4d82da892db9d68cac0a2d10e71dbe2fb","modified":1640079613597},{"_id":"public/archives/index.html","hash":"0f3dcaf9e55c841cad27592529cef2598b3a089e","modified":1640079613597},{"_id":"public/archives/2021/index.html","hash":"b5b95a27a0ecfe1df2f7737f397ef95fc3bd11f3","modified":1640079613597},{"_id":"public/archives/2021/12/index.html","hash":"88cb8d186b0c87e46d33847c487ebe287c58466a","modified":1640079613597},{"_id":"public/index.html","hash":"c8724cc9c97f6786ca083138363b47a64195d7d1","modified":1640079613597},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1640079613597},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1640079613597},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1640079613597},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1640079613597},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1640079613597},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1640079613597},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1640079613597},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1640079613597},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1640079613597},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1640079613597},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1640079613597},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1640079613597},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1640079613597},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1640079613597},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1640079613597},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1640079613597},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1640079613597},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1640079613597},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1640079613597},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1640079613597},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1640079613597},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1640079613597},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1640079613597},{"_id":"source/_posts/Lab02-Pointers-Memory.md","hash":"a5dc0f4f9f13becbf4e403dc41c906bdc10ab0a2","modified":1641719572870},{"_id":"source/_posts/Lab03-Struct.md","hash":"f0b32d91906c08882143c9f371272b2774ba4352","modified":1641719561952},{"_id":"source/_posts/WK01-DigitalCamera.md","hash":"b19507c903591092a9ee0d64f17321b91fe83968","modified":1641719547673},{"_id":"source/_posts/TIP-将hexo生成的博客网页放在Github-io子目录-Put-hexo-generated-blog-pages-into-subdirectories-of-Github-Pages.md","hash":"aecf761b5e4278bd98b3d68d822b305f1e72ee42","modified":1640089143235}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-12-21T10:46:45.273Z","updated":"2021-12-21T10:46:45.273Z","_id":"ckxfva7zk00000ctb0tif7win","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Lab02_Pointers&Memory","date":"2022-01-09T09:12:05.000Z","_content":"\n# ICS-53\n\n## Pointers & Memory\n\n- 配合*蓝宝书Ch.04*\n- 建议总是initialize指针为`NULL`\n- **void pointers**\n  - Generic pointers\n  - act like `char *`\n  - 主要用于记录addr\n  - 作为中间人，简化void pointer之间的转换操作\n\n### Arrays with Pointers\n- array <-> &array[0]\n- 2D arrays *row-major*\n\n### 指针右结合性与优先级的影响\n\n#### 2D arrays\n\n`a[3][1] <-> *(a+3*2+1)`  \n不是 `*a + 3*2 + 1 `，这只是在做数值计算\n\n### 指针与函数参数\n\n#### Pass by Value\n- An actual parameter expression is evaluated and copied\n  - Assignments to the para is **invisble**\n\n#### Pass by Reference\n- functions can change the values of its callers\n  - `void inc(int *callerVar) -> inc(&var)`\n\n### Dynamic Memory Allocation\n- **amount of memory space** needed is determined at **runtime**\n- C usese **explicit allocator** to manage memory\n\n#### malloc & free\n\n- `void *malloc (size_t size)`\n  - EX: `int *p = (int *) malloc( pSize * sizeof(int))`\n  - Success\n    - Returns a void pointer to memory block of *at least* `size` bytes\n      - aligned to an 8-byte(x86) or 16-byte(x86-64) boundry\n      - if `size`==0 -> return `NULL`\n  - Failed\n    - return `NULL` and sets `errno`\n- void free(void *p)\n  - EX: `free(p)`\n  - returns the block pointed by `p` to avalible memory\n- Other functions\n  - `calloc`: 加强版`malloc`, initialized allocated block to zero\n  - `realloc`: changes the size of previous allocated block\n  - `sbrk`: used internally by allocators to **grow or shrink the heap**\n\n\n### 实践笔记\n\n- `string` 不同于 `char array`。`string`结尾必定是EOF，而`char array`结尾可以不是。\n- **`void * a[]`，比如`char* a[]`，是一个指针数列，每个element占8 bytes**\n- **int占4字节**\n  - `printf(\"%s\",(char *) intArray)` 只会打印第1个字母，如果`intArray[1]`的最高位都是0（绝对值很小）。因为系统会认为`intArray[1]`的最高位是`\\EOF`zzzzz\n    - 比如`Lab02-P15`\n- **内存结构**\n  - C语言中***变量值***和***变量地址***是分开来存储的\n    - **变量值** 在 `.data`也就是`initialized/uninitialized data`中\n    - **变量地址**，`&var`在`stack`中\n","source":"_posts/Lab02-Pointers-Memory.md","raw":"---\ntitle: Lab02_Pointers&Memory\ndate: 2022-01-09 17:12:05\ntags:\n---\n\n# ICS-53\n\n## Pointers & Memory\n\n- 配合*蓝宝书Ch.04*\n- 建议总是initialize指针为`NULL`\n- **void pointers**\n  - Generic pointers\n  - act like `char *`\n  - 主要用于记录addr\n  - 作为中间人，简化void pointer之间的转换操作\n\n### Arrays with Pointers\n- array <-> &array[0]\n- 2D arrays *row-major*\n\n### 指针右结合性与优先级的影响\n\n#### 2D arrays\n\n`a[3][1] <-> *(a+3*2+1)`  \n不是 `*a + 3*2 + 1 `，这只是在做数值计算\n\n### 指针与函数参数\n\n#### Pass by Value\n- An actual parameter expression is evaluated and copied\n  - Assignments to the para is **invisble**\n\n#### Pass by Reference\n- functions can change the values of its callers\n  - `void inc(int *callerVar) -> inc(&var)`\n\n### Dynamic Memory Allocation\n- **amount of memory space** needed is determined at **runtime**\n- C usese **explicit allocator** to manage memory\n\n#### malloc & free\n\n- `void *malloc (size_t size)`\n  - EX: `int *p = (int *) malloc( pSize * sizeof(int))`\n  - Success\n    - Returns a void pointer to memory block of *at least* `size` bytes\n      - aligned to an 8-byte(x86) or 16-byte(x86-64) boundry\n      - if `size`==0 -> return `NULL`\n  - Failed\n    - return `NULL` and sets `errno`\n- void free(void *p)\n  - EX: `free(p)`\n  - returns the block pointed by `p` to avalible memory\n- Other functions\n  - `calloc`: 加强版`malloc`, initialized allocated block to zero\n  - `realloc`: changes the size of previous allocated block\n  - `sbrk`: used internally by allocators to **grow or shrink the heap**\n\n\n### 实践笔记\n\n- `string` 不同于 `char array`。`string`结尾必定是EOF，而`char array`结尾可以不是。\n- **`void * a[]`，比如`char* a[]`，是一个指针数列，每个element占8 bytes**\n- **int占4字节**\n  - `printf(\"%s\",(char *) intArray)` 只会打印第1个字母，如果`intArray[1]`的最高位都是0（绝对值很小）。因为系统会认为`intArray[1]`的最高位是`\\EOF`zzzzz\n    - 比如`Lab02-P15`\n- **内存结构**\n  - C语言中***变量值***和***变量地址***是分开来存储的\n    - **变量值** 在 `.data`也就是`initialized/uninitialized data`中\n    - **变量地址**，`&var`在`stack`中\n","slug":"Lab02-Pointers-Memory","published":1,"updated":"2022-01-09T09:12:52.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky71gon10000j0rte9slbew6","content":"<h1 id=\"ICS-53\"><a href=\"#ICS-53\" class=\"headerlink\" title=\"ICS-53\"></a>ICS-53</h1><h2 id=\"Pointers-amp-Memory\"><a href=\"#Pointers-amp-Memory\" class=\"headerlink\" title=\"Pointers &amp; Memory\"></a>Pointers &amp; Memory</h2><ul>\n<li>配合<em>蓝宝书Ch.04</em></li>\n<li>建议总是initialize指针为<code>NULL</code></li>\n<li><strong>void pointers</strong><ul>\n<li>Generic pointers</li>\n<li>act like <code>char *</code></li>\n<li>主要用于记录addr</li>\n<li>作为中间人，简化void pointer之间的转换操作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Arrays-with-Pointers\"><a href=\"#Arrays-with-Pointers\" class=\"headerlink\" title=\"Arrays with Pointers\"></a>Arrays with Pointers</h3><ul>\n<li>array &lt;-&gt; &amp;array[0]</li>\n<li>2D arrays <em>row-major</em></li>\n</ul>\n<h3 id=\"指针右结合性与优先级的影响\"><a href=\"#指针右结合性与优先级的影响\" class=\"headerlink\" title=\"指针右结合性与优先级的影响\"></a>指针右结合性与优先级的影响</h3><h4 id=\"2D-arrays\"><a href=\"#2D-arrays\" class=\"headerlink\" title=\"2D arrays\"></a>2D arrays</h4><p><code>a[3][1] &lt;-&gt; *(a+3*2+1)</code><br>不是 <code>*a + 3*2 + 1 </code>，这只是在做数值计算</p>\n<h3 id=\"指针与函数参数\"><a href=\"#指针与函数参数\" class=\"headerlink\" title=\"指针与函数参数\"></a>指针与函数参数</h3><h4 id=\"Pass-by-Value\"><a href=\"#Pass-by-Value\" class=\"headerlink\" title=\"Pass by Value\"></a>Pass by Value</h4><ul>\n<li>An actual parameter expression is evaluated and copied<ul>\n<li>Assignments to the para is <strong>invisble</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Pass-by-Reference\"><a href=\"#Pass-by-Reference\" class=\"headerlink\" title=\"Pass by Reference\"></a>Pass by Reference</h4><ul>\n<li>functions can change the values of its callers<ul>\n<li><code>void inc(int *callerVar) -&gt; inc(&amp;var)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Dynamic-Memory-Allocation\"><a href=\"#Dynamic-Memory-Allocation\" class=\"headerlink\" title=\"Dynamic Memory Allocation\"></a>Dynamic Memory Allocation</h3><ul>\n<li><strong>amount of memory space</strong> needed is determined at <strong>runtime</strong></li>\n<li>C usese <strong>explicit allocator</strong> to manage memory</li>\n</ul>\n<h4 id=\"malloc-amp-free\"><a href=\"#malloc-amp-free\" class=\"headerlink\" title=\"malloc &amp; free\"></a>malloc &amp; free</h4><ul>\n<li><code>void *malloc (size_t size)</code><ul>\n<li>EX: <code>int *p = (int *) malloc( pSize * sizeof(int))</code></li>\n<li>Success<ul>\n<li>Returns a void pointer to memory block of <em>at least</em> <code>size</code> bytes<ul>\n<li>aligned to an 8-byte(x86) or 16-byte(x86-64) boundry</li>\n<li>if <code>size</code>==0 -&gt; return <code>NULL</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Failed<ul>\n<li>return <code>NULL</code> and sets <code>errno</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>void free(void *p)<ul>\n<li>EX: <code>free(p)</code></li>\n<li>returns the block pointed by <code>p</code> to avalible memory</li>\n</ul>\n</li>\n<li>Other functions<ul>\n<li><code>calloc</code>: 加强版<code>malloc</code>, initialized allocated block to zero</li>\n<li><code>realloc</code>: changes the size of previous allocated block</li>\n<li><code>sbrk</code>: used internally by allocators to <strong>grow or shrink the heap</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实践笔记\"><a href=\"#实践笔记\" class=\"headerlink\" title=\"实践笔记\"></a>实践笔记</h3><ul>\n<li><code>string</code> 不同于 <code>char array</code>。<code>string</code>结尾必定是EOF，而<code>char array</code>结尾可以不是。</li>\n<li><strong><code>void * a[]</code>，比如<code>char* a[]</code>，是一个指针数列，每个element占8 bytes</strong></li>\n<li><strong>int占4字节</strong><ul>\n<li><code>printf(&quot;%s&quot;,(char *) intArray)</code> 只会打印第1个字母，如果<code>intArray[1]</code>的最高位都是0（绝对值很小）。因为系统会认为<code>intArray[1]</code>的最高位是<code>\\EOF</code>zzzzz<ul>\n<li>比如<code>Lab02-P15</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>内存结构</strong><ul>\n<li>C语言中<em><strong>变量值</strong></em>和<em><strong>变量地址</strong></em>是分开来存储的<ul>\n<li><strong>变量值</strong> 在 <code>.data</code>也就是<code>initialized/uninitialized data</code>中</li>\n<li><strong>变量地址</strong>，<code>&amp;var</code>在<code>stack</code>中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ICS-53\"><a href=\"#ICS-53\" class=\"headerlink\" title=\"ICS-53\"></a>ICS-53</h1><h2 id=\"Pointers-amp-Memory\"><a href=\"#Pointers-amp-Memory\" class=\"headerlink\" title=\"Pointers &amp; Memory\"></a>Pointers &amp; Memory</h2><ul>\n<li>配合<em>蓝宝书Ch.04</em></li>\n<li>建议总是initialize指针为<code>NULL</code></li>\n<li><strong>void pointers</strong><ul>\n<li>Generic pointers</li>\n<li>act like <code>char *</code></li>\n<li>主要用于记录addr</li>\n<li>作为中间人，简化void pointer之间的转换操作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Arrays-with-Pointers\"><a href=\"#Arrays-with-Pointers\" class=\"headerlink\" title=\"Arrays with Pointers\"></a>Arrays with Pointers</h3><ul>\n<li>array &lt;-&gt; &amp;array[0]</li>\n<li>2D arrays <em>row-major</em></li>\n</ul>\n<h3 id=\"指针右结合性与优先级的影响\"><a href=\"#指针右结合性与优先级的影响\" class=\"headerlink\" title=\"指针右结合性与优先级的影响\"></a>指针右结合性与优先级的影响</h3><h4 id=\"2D-arrays\"><a href=\"#2D-arrays\" class=\"headerlink\" title=\"2D arrays\"></a>2D arrays</h4><p><code>a[3][1] &lt;-&gt; *(a+3*2+1)</code><br>不是 <code>*a + 3*2 + 1 </code>，这只是在做数值计算</p>\n<h3 id=\"指针与函数参数\"><a href=\"#指针与函数参数\" class=\"headerlink\" title=\"指针与函数参数\"></a>指针与函数参数</h3><h4 id=\"Pass-by-Value\"><a href=\"#Pass-by-Value\" class=\"headerlink\" title=\"Pass by Value\"></a>Pass by Value</h4><ul>\n<li>An actual parameter expression is evaluated and copied<ul>\n<li>Assignments to the para is <strong>invisble</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Pass-by-Reference\"><a href=\"#Pass-by-Reference\" class=\"headerlink\" title=\"Pass by Reference\"></a>Pass by Reference</h4><ul>\n<li>functions can change the values of its callers<ul>\n<li><code>void inc(int *callerVar) -&gt; inc(&amp;var)</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Dynamic-Memory-Allocation\"><a href=\"#Dynamic-Memory-Allocation\" class=\"headerlink\" title=\"Dynamic Memory Allocation\"></a>Dynamic Memory Allocation</h3><ul>\n<li><strong>amount of memory space</strong> needed is determined at <strong>runtime</strong></li>\n<li>C usese <strong>explicit allocator</strong> to manage memory</li>\n</ul>\n<h4 id=\"malloc-amp-free\"><a href=\"#malloc-amp-free\" class=\"headerlink\" title=\"malloc &amp; free\"></a>malloc &amp; free</h4><ul>\n<li><code>void *malloc (size_t size)</code><ul>\n<li>EX: <code>int *p = (int *) malloc( pSize * sizeof(int))</code></li>\n<li>Success<ul>\n<li>Returns a void pointer to memory block of <em>at least</em> <code>size</code> bytes<ul>\n<li>aligned to an 8-byte(x86) or 16-byte(x86-64) boundry</li>\n<li>if <code>size</code>==0 -&gt; return <code>NULL</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Failed<ul>\n<li>return <code>NULL</code> and sets <code>errno</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>void free(void *p)<ul>\n<li>EX: <code>free(p)</code></li>\n<li>returns the block pointed by <code>p</code> to avalible memory</li>\n</ul>\n</li>\n<li>Other functions<ul>\n<li><code>calloc</code>: 加强版<code>malloc</code>, initialized allocated block to zero</li>\n<li><code>realloc</code>: changes the size of previous allocated block</li>\n<li><code>sbrk</code>: used internally by allocators to <strong>grow or shrink the heap</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实践笔记\"><a href=\"#实践笔记\" class=\"headerlink\" title=\"实践笔记\"></a>实践笔记</h3><ul>\n<li><code>string</code> 不同于 <code>char array</code>。<code>string</code>结尾必定是EOF，而<code>char array</code>结尾可以不是。</li>\n<li><strong><code>void * a[]</code>，比如<code>char* a[]</code>，是一个指针数列，每个element占8 bytes</strong></li>\n<li><strong>int占4字节</strong><ul>\n<li><code>printf(&quot;%s&quot;,(char *) intArray)</code> 只会打印第1个字母，如果<code>intArray[1]</code>的最高位都是0（绝对值很小）。因为系统会认为<code>intArray[1]</code>的最高位是<code>\\EOF</code>zzzzz<ul>\n<li>比如<code>Lab02-P15</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>内存结构</strong><ul>\n<li>C语言中<em><strong>变量值</strong></em>和<em><strong>变量地址</strong></em>是分开来存储的<ul>\n<li><strong>变量值</strong> 在 <code>.data</code>也就是<code>initialized/uninitialized data</code>中</li>\n<li><strong>变量地址</strong>，<code>&amp;var</code>在<code>stack</code>中</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Lab03_Struct","date":"2022-01-09T09:12:16.000Z","_content":"\n# ICS-53\n\n## Struct\n\n\n### <stdio.h>\n\n\n### Strings & <string.h>\n\n- Copy\n  - strcpy\n- strlen\n- strchr ≈ python find()\n\n- loop\n  - `for(char* i=line;*i;++i)`\n    - 当`*i==\\EOF`时，即末尾时，停止\n- Formatted strings\n  - int sscanf(char *string, char *format, ...)\n  - int sprinf(char *buffer, char *format, ...)\n  - all return the number of successful characters\n  \n### Structs\n- types can be defined\n```C\n    typedef struct {int x; int y} Point; \n    Point p;\n    p.x = 0; p.y =0;\n```\n- Overall size is sum of elements and paddings in between\n  - ```C\n    struct {\n        char x;\n        int y;\n        char z;\n    } s1;\n    sizeof(s1) != 1+4+1 // == 12 = 4(char+padding=3)+4(int)+4(char+padding=3)\n    struct {\n        char x,z;\n        int y;\n    } s2;\n    sizeof(s2) != 1+4+1 // == 8 = 4(char+char+padding=2)+4(int)\n    ```\n    - word alignment here\n      - It benefits array\n- can model real memory layout\n```C\n    typedef struct {\n        int a:2; //size in bits\n        int b:1;\n    } Complex\n```\n- bit fields\n- Deferencing pointers to struct elements\n  - `(*structPtr).element`\n  - `structPtr->element`\n\n#### Union\n\n```C\n  union u-tag {\n      int iv\n  }\n```\n- like structs\n- occpy same memory space\n    - 无论读哪个element，都按头地址读\n- can hold different types at different times\n- overall size is largest of elements\n  \n#### Memory Pitfalls 常见错误\n\n- Dereferencing bad pointers\n```C\nint val;\nscanf(\"%d\",val); //should be &val\n```\n- Reading Uninitialized Memory\n```C\nint *y = malloc(...)\ny[0] += 1; // 需要初始化 y[0]\n```  \n- Overwriting Memory\n```C\nint **p;\np = malloc(N*sizeof(int));\nfor (i=0;i<N;++i)\n    p[i] = malloc(M*sizeof(int))\n```\n- referencing a pointer instend of value\n  - should it be `*p` or just `p`?\n- referencing Nonexistent variables\n```C\nint helper(){\n    int val;\n    return &val; // 该内存返回时已经去掉\n}\n```\n- free one block multiple times\n- referencing freed blocks\n- failling to free allocated blocks\n- free only parts of data structure\n  - 比如链表只free head\n\n##### DEALING with bugs\n- gdb\n- Valgrind\n- glibc mallloc contains checking code\n  - `setenv MALLOC_CHECK_ 3`\n\n\n### The Lost Art of Structure Packing 笔记\n- [Link to the Article](http://www.catb.org/esr/structure-packing/)\n- ASSUME x86 or ARM or any with *self-alignment*\n\n#### 1. Who should read this\n\n#### 2. Why I wrote it\n\n#### 3. Alignment requirement\n\n-  the way your compiler lays out basic datatypes in memory is constrained in order **to make memory accesses faster**\n-  each type except char has an ***alignment requirement***; \n   -  任何type的地址都必须被`sizeof(type)`整除\n   -  Ex: 2-byte shorts must start on an even address, \n   -  4-byte ints or floats must start on an address divisible by 4,\n   -  *Signed or unsigned makes no difference*\n   -  The jargon for this is that basic C types on x86 and ARM are ***self-aligned***. \n   -  Pointers, whether 32-bit (4-byte) or 64-bit (8-byte) are *self-aligned* too.\n- Self-alignment makes access faster because it facilitates generating ***single-instruction fetches*** and puts of the typed data. \n- on some ***older ones*** forcing your C program to violate alignment rules didn’t just slow your code down, it caused **an illegal instruction fault**. \n- Also, self-alignment is **not the only** possible rule.\n- NTP默认有alignment\n  - platforms with padding rules other than self-alignment are \n    - either nonexistent or \n    - confined to such specialized niches that they’re never either NTP servers or clients.\n\n#### 4. Padding\nIn fact, the hidden assumption that the ***allocated order of static variables is their source order*** is not necessarily valid\n```C\n  struct s{\n    char *p;\n    char c;\n    int x;\n  }\n```\n- Here’s what actually happens. The storage for p starts on a self-aligned 4- or 8-byte boundary depending on the machine word size. This is ***pointer alignment*** - the strictest possible.\n```C\nchar *p;      /* 4 or 8 bytes */\nchar c;       /* 1 byte */\nchar pad[3];  /* 3 bytes */\nint x;        /* 4 bytes */\n```\n- The `pad[3]` character array represents the fact that there are three bytes of **waste space** in the structure.  \n  - The old-school term for this was \"slop\". \n  - The value of the padding bits is **undefined**; \n    - in particular ***it is not guaranteed that they will be zeroed***.\n```C\nchar c;\nchar pad1[M];\nchar *p;\nchar pad2[N];\nint x;\n```\n- what can we say about M and N?\n  - First, in this case `N` will be zero\n  - The value of `M` is **less predictable**.\n    - *If the compiler happened to map c to the last byte of a machine word, the next byte (the first of p) would be the first byte of the next one and properly pointer-aligned. M would be zero.*\n    - It is more likely that c will be mapped to the **first byte of a machine word**. In that case M will be whatever padding is needed to ensure that **p has pointer alignment** - 3 on a 32-bit machine, 7 on a 64-bit machine.\n- On a platform with self-aligned types, **arrays** of char/short/int/long/pointer have **no internal padding**;\n  - each member is automatically self-aligned at the end of the next one\n- same to **Go structs**, and to **Rust structs with the \"repr(C)\" attribute**, with only syntactic changes.\n  \n#### 5. Structure alignment and padding\n- In general, a struct instance will have ***the alignment of its widest scalar member***. \n  - Compilers do this as the easiest way to **ensure that all the members are self-aligned for fast access**.\n- in C (and Go, and Rust) **there is no leading padding**.  \n  - In C++ this may not be true; \n```C\nstruct foo1 {\n    char *p;\n    char c;\n    long x;\n};\n/* On 64-bit sizeof(void *)==8 */\nstruct foo1 {\n    char *p;     /* 8 bytes */\n    char c;      /* 1 byte*/\n    char pad[7]; /* 7 bytes */\n    long x;      /* 8 bytes */\n};\n```\n\n#### Trailing Padding\n\n- **stride address of a structure**\n  - It is the first address following the structure data that has the same alignment as the structure.\n- The general rule of trailing structure padding is this: the compiler will behave as though the structure has trailing padding out to its stride address\n- If your structure has **structure members**, the inner structs want to have the alignment of **longest scalar** too\n```C\nstruct foo5 {\n    char c;\n    struct foo5_inner {\n        char *p;\n        short x;\n    } inner;\n};\n\n```\n\n- The char *p member in the inner struct forces the **outer struct to be pointer-aligned as well as the inner**\n\n```C\nstruct foo5 {\n    char c;           /* 1 byte*/\n    char pad1[7];     /* 7 bytes */\n    struct foo5_inner {\n        char *p;      /* 8 bytes */\n        short x;      /* 2 bytes */\n        char pad2[6]; /* 6 bytes */\n    } inner;\n};\n```\n\n- This structure gives us a hint of **the savings that might be possible from repacking structures**. \n  - Of 24 bytes, 13 of them are padding. That’s more than 50% waste space!\n\n#### 6. Bitfields\n\n```C\nstruct foo6 {\n    short s;\n    char c;\n    int flip:1;\n    int nybble:4;\n    int septet:7;\n};\n```\n- What they give you the ability to do is declare structure fields of smaller than character width, down to 1 bit, like this.\n\n- The thing to know about bitfields is that they are implemented with word- and byte-level mask and rotate instructions operating on machine words, and **cannot cross word boundaries**.\n  - C99 guarentees that bit-fields will be packed as tightly as possible, provided they don’t cross storage unit boundaries\n  - This restriction is relaxed in C11 (6.7.2.1p11) and C++14 ([class.bit]p1); \n    - It’s up to the implementation to decide;\n      - GCC leaves it up to the ABI, which for x64 does prevent them from sharing an allocation unit.\n```C\n/* 32-bit machine */\nstruct foo6 {\n    short s;       /* 2 bytes */\n    char c;        /* 1 byte */\n    int flip:1;    /* total 1 bit */\n    int nybble:4;  /* total 5 bits */\n    int pad1:3;    /* pad to an 8-bit boundary */\n    int septet:7;  /* 7 bits */\n    int pad2:25;   /* pad to 32 bits */\n};\n```\n\n- As with normal structure padding, the padding bits **are not guaranteed to be zero**; C99 mentions this\n- The base type of a bit field is interpreted for **signedness** but not necessarily for **size**.\n  - It is up to implementors \n    - whether \"short flip:1\" or \"long flip:1\" are supported, \n    - whether those base types change the size of the storage unit the field is packed into.\n\n```C\nstruct foo7 {\n    int bigfield:31;      /* 32-bit word 1 begins */\n    int littlefield:1;\n};\n\nstruct foo8 {\n    int bigfield1:31;     /* 32-bit word 1 begins /*\n    int littlefield1:1;\n    int bigfield2:31;     /* 32-bit word 2 begins */\n    int littlefield2:1;\n};\n\nstruct foo9 {\n    int bigfield1:31;     /* 32-bit word 1 begins */\n    int bigfield2:31;     /* 32-bit word 2 begins */\n    int littlefield1:1;\n    int littlefield2:1;   /* 32-bit word 3 begins */\n};\n```\n- Again, C11 and C++14 may pack `foo9` tighter, but it would perhaps be ***unwise*** to count on this.\n\n#### 7. Structure reordering\n\n- The first thing to notice is that slop only happens in two places. \n  1. One is where storage bound to a larger data type (with stricter alignment requirements) follows storage bound to a smaller one. \n  2. The other is where a struct naturally ends before its stride address, requiring padding so the next one will be properly aligned\n\n- The simplest way to eliminate slop is to reorder the structure members by **decreasing alignment**. \n```C\nstruct foo10 {\n    char c;\n    struct foo10 *p;\n    short x;\n};\nstruct foo10 {\n    char c;          /* 1 byte */\n    char pad1[7];    /* 7 bytes */\n    struct foo10 *p; /* 8 bytes */\n    short x;         /* 2 bytes */\n    char pad2[6];    /* 6 bytes */\n};\n```\n24 bytes TO 16 bytes\n```C\nstruct foo11 {\n    struct foo11 *p;\n    short x;\n    char c;\n};\nstruct foo11 {\n    struct foo11 *p; /* 8 bytes */\n    short x;         /* 2 bytes */\n    char c;          /* 1 byte */\n    char pad[5];     /* 5 bytes */\n};\n```\n\n- Reordering is not guaranteed to produce saving\n- Curiously, strictly ordering your structure fields **by increasing size** also works to mimimize padding. \n\n- Why, if reordering for minimal slop is so simple, C compilers **don’t do it automatically**?\n  - Automatic reordering would **interfere** with a systems programmer’s ability to lay out structures that exactly match the byte and bit-level layout of memory-mapped device control block\n  -  **Rust** makes the opposite choice; by default, its compiler *may* reorder structure fields.\n\n#### 8~ 未完待续","source":"_posts/Lab03-Struct.md","raw":"---\ntitle: Lab03_Struct\ndate: 2022-01-09 17:12:16\ntags:\n---\n\n# ICS-53\n\n## Struct\n\n\n### <stdio.h>\n\n\n### Strings & <string.h>\n\n- Copy\n  - strcpy\n- strlen\n- strchr ≈ python find()\n\n- loop\n  - `for(char* i=line;*i;++i)`\n    - 当`*i==\\EOF`时，即末尾时，停止\n- Formatted strings\n  - int sscanf(char *string, char *format, ...)\n  - int sprinf(char *buffer, char *format, ...)\n  - all return the number of successful characters\n  \n### Structs\n- types can be defined\n```C\n    typedef struct {int x; int y} Point; \n    Point p;\n    p.x = 0; p.y =0;\n```\n- Overall size is sum of elements and paddings in between\n  - ```C\n    struct {\n        char x;\n        int y;\n        char z;\n    } s1;\n    sizeof(s1) != 1+4+1 // == 12 = 4(char+padding=3)+4(int)+4(char+padding=3)\n    struct {\n        char x,z;\n        int y;\n    } s2;\n    sizeof(s2) != 1+4+1 // == 8 = 4(char+char+padding=2)+4(int)\n    ```\n    - word alignment here\n      - It benefits array\n- can model real memory layout\n```C\n    typedef struct {\n        int a:2; //size in bits\n        int b:1;\n    } Complex\n```\n- bit fields\n- Deferencing pointers to struct elements\n  - `(*structPtr).element`\n  - `structPtr->element`\n\n#### Union\n\n```C\n  union u-tag {\n      int iv\n  }\n```\n- like structs\n- occpy same memory space\n    - 无论读哪个element，都按头地址读\n- can hold different types at different times\n- overall size is largest of elements\n  \n#### Memory Pitfalls 常见错误\n\n- Dereferencing bad pointers\n```C\nint val;\nscanf(\"%d\",val); //should be &val\n```\n- Reading Uninitialized Memory\n```C\nint *y = malloc(...)\ny[0] += 1; // 需要初始化 y[0]\n```  \n- Overwriting Memory\n```C\nint **p;\np = malloc(N*sizeof(int));\nfor (i=0;i<N;++i)\n    p[i] = malloc(M*sizeof(int))\n```\n- referencing a pointer instend of value\n  - should it be `*p` or just `p`?\n- referencing Nonexistent variables\n```C\nint helper(){\n    int val;\n    return &val; // 该内存返回时已经去掉\n}\n```\n- free one block multiple times\n- referencing freed blocks\n- failling to free allocated blocks\n- free only parts of data structure\n  - 比如链表只free head\n\n##### DEALING with bugs\n- gdb\n- Valgrind\n- glibc mallloc contains checking code\n  - `setenv MALLOC_CHECK_ 3`\n\n\n### The Lost Art of Structure Packing 笔记\n- [Link to the Article](http://www.catb.org/esr/structure-packing/)\n- ASSUME x86 or ARM or any with *self-alignment*\n\n#### 1. Who should read this\n\n#### 2. Why I wrote it\n\n#### 3. Alignment requirement\n\n-  the way your compiler lays out basic datatypes in memory is constrained in order **to make memory accesses faster**\n-  each type except char has an ***alignment requirement***; \n   -  任何type的地址都必须被`sizeof(type)`整除\n   -  Ex: 2-byte shorts must start on an even address, \n   -  4-byte ints or floats must start on an address divisible by 4,\n   -  *Signed or unsigned makes no difference*\n   -  The jargon for this is that basic C types on x86 and ARM are ***self-aligned***. \n   -  Pointers, whether 32-bit (4-byte) or 64-bit (8-byte) are *self-aligned* too.\n- Self-alignment makes access faster because it facilitates generating ***single-instruction fetches*** and puts of the typed data. \n- on some ***older ones*** forcing your C program to violate alignment rules didn’t just slow your code down, it caused **an illegal instruction fault**. \n- Also, self-alignment is **not the only** possible rule.\n- NTP默认有alignment\n  - platforms with padding rules other than self-alignment are \n    - either nonexistent or \n    - confined to such specialized niches that they’re never either NTP servers or clients.\n\n#### 4. Padding\nIn fact, the hidden assumption that the ***allocated order of static variables is their source order*** is not necessarily valid\n```C\n  struct s{\n    char *p;\n    char c;\n    int x;\n  }\n```\n- Here’s what actually happens. The storage for p starts on a self-aligned 4- or 8-byte boundary depending on the machine word size. This is ***pointer alignment*** - the strictest possible.\n```C\nchar *p;      /* 4 or 8 bytes */\nchar c;       /* 1 byte */\nchar pad[3];  /* 3 bytes */\nint x;        /* 4 bytes */\n```\n- The `pad[3]` character array represents the fact that there are three bytes of **waste space** in the structure.  \n  - The old-school term for this was \"slop\". \n  - The value of the padding bits is **undefined**; \n    - in particular ***it is not guaranteed that they will be zeroed***.\n```C\nchar c;\nchar pad1[M];\nchar *p;\nchar pad2[N];\nint x;\n```\n- what can we say about M and N?\n  - First, in this case `N` will be zero\n  - The value of `M` is **less predictable**.\n    - *If the compiler happened to map c to the last byte of a machine word, the next byte (the first of p) would be the first byte of the next one and properly pointer-aligned. M would be zero.*\n    - It is more likely that c will be mapped to the **first byte of a machine word**. In that case M will be whatever padding is needed to ensure that **p has pointer alignment** - 3 on a 32-bit machine, 7 on a 64-bit machine.\n- On a platform with self-aligned types, **arrays** of char/short/int/long/pointer have **no internal padding**;\n  - each member is automatically self-aligned at the end of the next one\n- same to **Go structs**, and to **Rust structs with the \"repr(C)\" attribute**, with only syntactic changes.\n  \n#### 5. Structure alignment and padding\n- In general, a struct instance will have ***the alignment of its widest scalar member***. \n  - Compilers do this as the easiest way to **ensure that all the members are self-aligned for fast access**.\n- in C (and Go, and Rust) **there is no leading padding**.  \n  - In C++ this may not be true; \n```C\nstruct foo1 {\n    char *p;\n    char c;\n    long x;\n};\n/* On 64-bit sizeof(void *)==8 */\nstruct foo1 {\n    char *p;     /* 8 bytes */\n    char c;      /* 1 byte*/\n    char pad[7]; /* 7 bytes */\n    long x;      /* 8 bytes */\n};\n```\n\n#### Trailing Padding\n\n- **stride address of a structure**\n  - It is the first address following the structure data that has the same alignment as the structure.\n- The general rule of trailing structure padding is this: the compiler will behave as though the structure has trailing padding out to its stride address\n- If your structure has **structure members**, the inner structs want to have the alignment of **longest scalar** too\n```C\nstruct foo5 {\n    char c;\n    struct foo5_inner {\n        char *p;\n        short x;\n    } inner;\n};\n\n```\n\n- The char *p member in the inner struct forces the **outer struct to be pointer-aligned as well as the inner**\n\n```C\nstruct foo5 {\n    char c;           /* 1 byte*/\n    char pad1[7];     /* 7 bytes */\n    struct foo5_inner {\n        char *p;      /* 8 bytes */\n        short x;      /* 2 bytes */\n        char pad2[6]; /* 6 bytes */\n    } inner;\n};\n```\n\n- This structure gives us a hint of **the savings that might be possible from repacking structures**. \n  - Of 24 bytes, 13 of them are padding. That’s more than 50% waste space!\n\n#### 6. Bitfields\n\n```C\nstruct foo6 {\n    short s;\n    char c;\n    int flip:1;\n    int nybble:4;\n    int septet:7;\n};\n```\n- What they give you the ability to do is declare structure fields of smaller than character width, down to 1 bit, like this.\n\n- The thing to know about bitfields is that they are implemented with word- and byte-level mask and rotate instructions operating on machine words, and **cannot cross word boundaries**.\n  - C99 guarentees that bit-fields will be packed as tightly as possible, provided they don’t cross storage unit boundaries\n  - This restriction is relaxed in C11 (6.7.2.1p11) and C++14 ([class.bit]p1); \n    - It’s up to the implementation to decide;\n      - GCC leaves it up to the ABI, which for x64 does prevent them from sharing an allocation unit.\n```C\n/* 32-bit machine */\nstruct foo6 {\n    short s;       /* 2 bytes */\n    char c;        /* 1 byte */\n    int flip:1;    /* total 1 bit */\n    int nybble:4;  /* total 5 bits */\n    int pad1:3;    /* pad to an 8-bit boundary */\n    int septet:7;  /* 7 bits */\n    int pad2:25;   /* pad to 32 bits */\n};\n```\n\n- As with normal structure padding, the padding bits **are not guaranteed to be zero**; C99 mentions this\n- The base type of a bit field is interpreted for **signedness** but not necessarily for **size**.\n  - It is up to implementors \n    - whether \"short flip:1\" or \"long flip:1\" are supported, \n    - whether those base types change the size of the storage unit the field is packed into.\n\n```C\nstruct foo7 {\n    int bigfield:31;      /* 32-bit word 1 begins */\n    int littlefield:1;\n};\n\nstruct foo8 {\n    int bigfield1:31;     /* 32-bit word 1 begins /*\n    int littlefield1:1;\n    int bigfield2:31;     /* 32-bit word 2 begins */\n    int littlefield2:1;\n};\n\nstruct foo9 {\n    int bigfield1:31;     /* 32-bit word 1 begins */\n    int bigfield2:31;     /* 32-bit word 2 begins */\n    int littlefield1:1;\n    int littlefield2:1;   /* 32-bit word 3 begins */\n};\n```\n- Again, C11 and C++14 may pack `foo9` tighter, but it would perhaps be ***unwise*** to count on this.\n\n#### 7. Structure reordering\n\n- The first thing to notice is that slop only happens in two places. \n  1. One is where storage bound to a larger data type (with stricter alignment requirements) follows storage bound to a smaller one. \n  2. The other is where a struct naturally ends before its stride address, requiring padding so the next one will be properly aligned\n\n- The simplest way to eliminate slop is to reorder the structure members by **decreasing alignment**. \n```C\nstruct foo10 {\n    char c;\n    struct foo10 *p;\n    short x;\n};\nstruct foo10 {\n    char c;          /* 1 byte */\n    char pad1[7];    /* 7 bytes */\n    struct foo10 *p; /* 8 bytes */\n    short x;         /* 2 bytes */\n    char pad2[6];    /* 6 bytes */\n};\n```\n24 bytes TO 16 bytes\n```C\nstruct foo11 {\n    struct foo11 *p;\n    short x;\n    char c;\n};\nstruct foo11 {\n    struct foo11 *p; /* 8 bytes */\n    short x;         /* 2 bytes */\n    char c;          /* 1 byte */\n    char pad[5];     /* 5 bytes */\n};\n```\n\n- Reordering is not guaranteed to produce saving\n- Curiously, strictly ordering your structure fields **by increasing size** also works to mimimize padding. \n\n- Why, if reordering for minimal slop is so simple, C compilers **don’t do it automatically**?\n  - Automatic reordering would **interfere** with a systems programmer’s ability to lay out structures that exactly match the byte and bit-level layout of memory-mapped device control block\n  -  **Rust** makes the opposite choice; by default, its compiler *may* reorder structure fields.\n\n#### 8~ 未完待续","slug":"Lab03-Struct","published":1,"updated":"2022-01-09T09:12:41.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky71gon40001j0rtfell4als","content":"<h1 id=\"ICS-53\"><a href=\"#ICS-53\" class=\"headerlink\" title=\"ICS-53\"></a>ICS-53</h1><h2 id=\"Struct\"><a href=\"#Struct\" class=\"headerlink\" title=\"Struct\"></a>Struct</h2><h3 id=\"lt-stdio-h-gt\"><a href=\"#lt-stdio-h-gt\" class=\"headerlink\" title=\"&lt;stdio.h&gt;\"></a>&lt;stdio.h&gt;</h3><h3 id=\"Strings-amp-lt-string-h-gt\"><a href=\"#Strings-amp-lt-string-h-gt\" class=\"headerlink\" title=\"Strings &amp; &lt;string.h&gt;\"></a>Strings &amp; &lt;string.h&gt;</h3><ul>\n<li><p>Copy</p>\n<ul>\n<li>strcpy</li>\n</ul>\n</li>\n<li><p>strlen</p>\n</li>\n<li><p>strchr ≈ python find()</p>\n</li>\n<li><p>loop</p>\n<ul>\n<li><code>for(char* i=line;*i;++i)</code><ul>\n<li>当<code>*i==\\EOF</code>时，即末尾时，停止</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Formatted strings</p>\n<ul>\n<li>int sscanf(char *string, char *format, …)</li>\n<li>int sprinf(char *buffer, char *format, …)</li>\n<li>all return the number of successful characters</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Structs\"><a href=\"#Structs\" class=\"headerlink\" title=\"Structs\"></a>Structs</h3><ul>\n<li>types can be defined<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span><span class=\"keyword\">int</span> x; <span class=\"keyword\">int</span> y&#125; Point; </span><br><span class=\"line\">Point p;</span><br><span class=\"line\">p.x = <span class=\"number\">0</span>; p.y =<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></li>\n<li>Overall size is sum of elements and paddings in between<ul>\n<li>```C<br>struct {<pre><code>char x;\nint y;\nchar z;\n</code></pre>\n} s1;<br>sizeof(s1) != 1+4+1 // == 12 = 4(char+padding=3)+4(int)+4(char+padding=3)<br>struct {<pre><code>char x,z;\nint y;\n</code></pre>\n} s2;<br>sizeof(s2) != 1+4+1 // == 8 = 4(char+char+padding=2)+4(int)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    - word alignment here</span><br><span class=\"line\">      - It benefits array</span><br><span class=\"line\">- can model real memory layout</span><br><span class=\"line\">```C</span><br><span class=\"line\">    typedef struct &#123;</span><br><span class=\"line\">        int a:2; //size in bits</span><br><span class=\"line\">        int b:1;</span><br><span class=\"line\">    &#125; Complex</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>bit fields</li>\n<li>Deferencing pointers to struct elements<ul>\n<li><code>(*structPtr).element</code></li>\n<li><code>structPtr-&gt;element</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Union\"><a href=\"#Union\" class=\"headerlink\" title=\"Union\"></a>Union</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">u</span>-<span class=\"title\">tag</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> iv</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>like structs</li>\n<li>occpy same memory space<ul>\n<li>无论读哪个element，都按头地址读</li>\n</ul>\n</li>\n<li>can hold different types at different times</li>\n<li>overall size is largest of elements</li>\n</ul>\n<h4 id=\"Memory-Pitfalls-常见错误\"><a href=\"#Memory-Pitfalls-常见错误\" class=\"headerlink\" title=\"Memory Pitfalls 常见错误\"></a>Memory Pitfalls 常见错误</h4><ul>\n<li>Dereferencing bad pointers<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> val;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,val); <span class=\"comment\">//should be &amp;val</span></span><br></pre></td></tr></table></figure></li>\n<li>Reading Uninitialized Memory<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *y = <span class=\"built_in\">malloc</span>(...)</span><br><span class=\"line\">y[<span class=\"number\">0</span>] += <span class=\"number\">1</span>; <span class=\"comment\">// 需要初始化 y[0]</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">- Overwriting Memory</span><br><span class=\"line\">```C</span><br><span class=\"line\"><span class=\"keyword\">int</span> **p;</span><br><span class=\"line\">p = <span class=\"built_in\">malloc</span>(N*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;N;++i)</span><br><span class=\"line\">    p[i] = <span class=\"built_in\">malloc</span>(M*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>))</span><br></pre></td></tr></table></figure></li>\n<li>referencing a pointer instend of value<ul>\n<li>should it be <code>*p</code> or just <code>p</code>?</li>\n</ul>\n</li>\n<li>referencing Nonexistent variables<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;val; <span class=\"comment\">// 该内存返回时已经去掉</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>free one block multiple times</li>\n<li>referencing freed blocks</li>\n<li>failling to free allocated blocks</li>\n<li>free only parts of data structure<ul>\n<li>比如链表只free head</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"DEALING-with-bugs\"><a href=\"#DEALING-with-bugs\" class=\"headerlink\" title=\"DEALING with bugs\"></a>DEALING with bugs</h5><ul>\n<li>gdb</li>\n<li>Valgrind</li>\n<li>glibc mallloc contains checking code<ul>\n<li><code>setenv MALLOC_CHECK_ 3</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"The-Lost-Art-of-Structure-Packing-笔记\"><a href=\"#The-Lost-Art-of-Structure-Packing-笔记\" class=\"headerlink\" title=\"The Lost Art of Structure Packing 笔记\"></a>The Lost Art of Structure Packing 笔记</h3><ul>\n<li><a href=\"http://www.catb.org/esr/structure-packing/\">Link to the Article</a></li>\n<li>ASSUME x86 or ARM or any with <em>self-alignment</em></li>\n</ul>\n<h4 id=\"1-Who-should-read-this\"><a href=\"#1-Who-should-read-this\" class=\"headerlink\" title=\"1. Who should read this\"></a>1. Who should read this</h4><h4 id=\"2-Why-I-wrote-it\"><a href=\"#2-Why-I-wrote-it\" class=\"headerlink\" title=\"2. Why I wrote it\"></a>2. Why I wrote it</h4><h4 id=\"3-Alignment-requirement\"><a href=\"#3-Alignment-requirement\" class=\"headerlink\" title=\"3. Alignment requirement\"></a>3. Alignment requirement</h4><ul>\n<li> the way your compiler lays out basic datatypes in memory is constrained in order <strong>to make memory accesses faster</strong></li>\n<li>each type except char has an <em><strong>alignment requirement</strong></em>; <ul>\n<li> 任何type的地址都必须被<code>sizeof(type)</code>整除</li>\n<li> Ex: 2-byte shorts must start on an even address, </li>\n<li> 4-byte ints or floats must start on an address divisible by 4,</li>\n<li> <em>Signed or unsigned makes no difference</em></li>\n<li> The jargon for this is that basic C types on x86 and ARM are <em><strong>self-aligned</strong></em>. </li>\n<li> Pointers, whether 32-bit (4-byte) or 64-bit (8-byte) are <em>self-aligned</em> too.</li>\n</ul>\n</li>\n<li>Self-alignment makes access faster because it facilitates generating <em><strong>single-instruction fetches</strong></em> and puts of the typed data. </li>\n<li>on some <em><strong>older ones</strong></em> forcing your C program to violate alignment rules didn’t just slow your code down, it caused <strong>an illegal instruction fault</strong>. </li>\n<li>Also, self-alignment is <strong>not the only</strong> possible rule.</li>\n<li>NTP默认有alignment<ul>\n<li>platforms with padding rules other than self-alignment are <ul>\n<li>either nonexistent or </li>\n<li>confined to such specialized niches that they’re never either NTP servers or clients.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-Padding\"><a href=\"#4-Padding\" class=\"headerlink\" title=\"4. Padding\"></a>4. Padding</h4><p>In fact, the hidden assumption that the <em><strong>allocated order of static variables is their source order</strong></em> is not necessarily valid</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Here’s what actually happens. The storage for p starts on a self-aligned 4- or 8-byte boundary depending on the machine word size. This is <em><strong>pointer alignment</strong></em> - the strictest possible.<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *p;      <span class=\"comment\">/* 4 or 8 bytes */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c;       <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> pad[<span class=\"number\">3</span>];  <span class=\"comment\">/* 3 bytes */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x;        <span class=\"comment\">/* 4 bytes */</span></span><br></pre></td></tr></table></figure></li>\n<li>The <code>pad[3]</code> character array represents the fact that there are three bytes of <strong>waste space</strong> in the structure.  <ul>\n<li>The old-school term for this was “slop”. </li>\n<li>The value of the padding bits is <strong>undefined</strong>; <ul>\n<li>in particular <em><strong>it is not guaranteed that they will be zeroed</strong></em>.<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"keyword\">char</span> pad1[M];</span><br><span class=\"line\"><span class=\"keyword\">char</span> *p;</span><br><span class=\"line\"><span class=\"keyword\">char</span> pad2[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>what can we say about M and N?<ul>\n<li>First, in this case <code>N</code> will be zero</li>\n<li>The value of <code>M</code> is <strong>less predictable</strong>.<ul>\n<li><em>If the compiler happened to map c to the last byte of a machine word, the next byte (the first of p) would be the first byte of the next one and properly pointer-aligned. M would be zero.</em></li>\n<li>It is more likely that c will be mapped to the <strong>first byte of a machine word</strong>. In that case M will be whatever padding is needed to ensure that <strong>p has pointer alignment</strong> - 3 on a 32-bit machine, 7 on a 64-bit machine.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>On a platform with self-aligned types, <strong>arrays</strong> of char/short/int/long/pointer have <strong>no internal padding</strong>;<ul>\n<li>each member is automatically self-aligned at the end of the next one</li>\n</ul>\n</li>\n<li>same to <strong>Go structs</strong>, and to <strong>Rust structs with the “repr(C)” attribute</strong>, with only syntactic changes.</li>\n</ul>\n<h4 id=\"5-Structure-alignment-and-padding\"><a href=\"#5-Structure-alignment-and-padding\" class=\"headerlink\" title=\"5. Structure alignment and padding\"></a>5. Structure alignment and padding</h4><ul>\n<li>In general, a struct instance will have <em><strong>the alignment of its widest scalar member</strong></em>. <ul>\n<li>Compilers do this as the easiest way to <strong>ensure that all the members are self-aligned for fast access</strong>.</li>\n</ul>\n</li>\n<li>in C (and Go, and Rust) <strong>there is no leading padding</strong>.  <ul>\n<li>In C++ this may not be true; <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo1</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* On 64-bit sizeof(void *)==8 */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo1</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p;     <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;      <span class=\"comment\">/* 1 byte*/</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad[<span class=\"number\">7</span>]; <span class=\"comment\">/* 7 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> x;      <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Trailing-Padding\"><a href=\"#Trailing-Padding\" class=\"headerlink\" title=\"Trailing Padding\"></a>Trailing Padding</h4><ul>\n<li><p><strong>stride address of a structure</strong></p>\n<ul>\n<li>It is the first address following the structure data that has the same alignment as the structure.</li>\n</ul>\n</li>\n<li><p>The general rule of trailing structure padding is this: the compiler will behave as though the structure has trailing padding out to its stride address</p>\n</li>\n<li><p>If your structure has <strong>structure members</strong>, the inner structs want to have the alignment of <strong>longest scalar</strong> too</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5_inner</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">        <span class=\"keyword\">short</span> x;</span><br><span class=\"line\">    &#125; inner;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>The char *p member in the inner struct forces the <strong>outer struct to be pointer-aligned as well as the inner</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;           <span class=\"comment\">/* 1 byte*/</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad1[<span class=\"number\">7</span>];     <span class=\"comment\">/* 7 bytes */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5_inner</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p;      <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">        <span class=\"keyword\">short</span> x;      <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> pad2[<span class=\"number\">6</span>]; <span class=\"comment\">/* 6 bytes */</span></span><br><span class=\"line\">    &#125; inner;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>This structure gives us a hint of <strong>the savings that might be possible from repacking structures</strong>. <ul>\n<li>Of 24 bytes, 13 of them are padding. That’s more than 50% waste space!</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-Bitfields\"><a href=\"#6-Bitfields\" class=\"headerlink\" title=\"6. Bitfields\"></a>6. Bitfields</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo6</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flip:<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nybble:<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> septet:<span class=\"number\">7</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>What they give you the ability to do is declare structure fields of smaller than character width, down to 1 bit, like this.</p>\n</li>\n<li><p>The thing to know about bitfields is that they are implemented with word- and byte-level mask and rotate instructions operating on machine words, and <strong>cannot cross word boundaries</strong>.</p>\n<ul>\n<li>C99 guarentees that bit-fields will be packed as tightly as possible, provided they don’t cross storage unit boundaries</li>\n<li>This restriction is relaxed in C11 (6.7.2.1p11) and C++14 ([class.bit]p1); <ul>\n<li>It’s up to the implementation to decide;<ul>\n<li>GCC leaves it up to the ABI, which for x64 does prevent them from sharing an allocation unit.<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 32-bit machine */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo6</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> s;       <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;        <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> flip:<span class=\"number\">1</span>;    <span class=\"comment\">/* total 1 bit */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nybble:<span class=\"number\">4</span>;  <span class=\"comment\">/* total 5 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pad1:<span class=\"number\">3</span>;    <span class=\"comment\">/* pad to an 8-bit boundary */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> septet:<span class=\"number\">7</span>;  <span class=\"comment\">/* 7 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pad2:<span class=\"number\">25</span>;   <span class=\"comment\">/* pad to 32 bits */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>As with normal structure padding, the padding bits <strong>are not guaranteed to be zero</strong>; C99 mentions this</p>\n</li>\n<li><p>The base type of a bit field is interpreted for <strong>signedness</strong> but not necessarily for <strong>size</strong>.</p>\n<ul>\n<li>It is up to implementors <ul>\n<li>whether “short flip:1” or “long flip:1” are supported, </li>\n<li>whether those base types change the size of the storage unit the field is packed into.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo7</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield:<span class=\"number\">31</span>;      <span class=\"comment\">/* 32-bit word 1 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo8</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield1:<span class=\"number\">31</span>;     <span class=\"comment\">/* 32-bit word 1 begins /*</span></span><br><span class=\"line\"><span class=\"comment\">    int littlefield1:1;</span></span><br><span class=\"line\"><span class=\"comment\">    int bigfield2:31;     /* 32-bit word 2 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield2:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo9</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield1:<span class=\"number\">31</span>;     <span class=\"comment\">/* 32-bit word 1 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield2:<span class=\"number\">31</span>;     <span class=\"comment\">/* 32-bit word 2 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield1:<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield2:<span class=\"number\">1</span>;   <span class=\"comment\">/* 32-bit word 3 begins */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Again, C11 and C++14 may pack <code>foo9</code> tighter, but it would perhaps be <em><strong>unwise</strong></em> to count on this.</li>\n</ul>\n<h4 id=\"7-Structure-reordering\"><a href=\"#7-Structure-reordering\" class=\"headerlink\" title=\"7. Structure reordering\"></a>7. Structure reordering</h4><ul>\n<li><p>The first thing to notice is that slop only happens in two places. </p>\n<ol>\n<li>One is where storage bound to a larger data type (with stricter alignment requirements) follows storage bound to a smaller one. </li>\n<li>The other is where a struct naturally ends before its stride address, requiring padding so the next one will be properly aligned</li>\n</ol>\n</li>\n<li><p>The simplest way to eliminate slop is to reorder the structure members by <strong>decreasing alignment</strong>. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;          <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad1[<span class=\"number\">7</span>];    <span class=\"comment\">/* 7 bytes */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> *<span class=\"title\">p</span>;</span> <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;         <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad2[<span class=\"number\">6</span>];    <span class=\"comment\">/* 6 bytes */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>24 bytes TO 16 bytes</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> *<span class=\"title\">p</span>;</span> <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;         <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;          <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad[<span class=\"number\">5</span>];     <span class=\"comment\">/* 5 bytes */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>Reordering is not guaranteed to produce saving</p>\n</li>\n<li><p>Curiously, strictly ordering your structure fields <strong>by increasing size</strong> also works to mimimize padding. </p>\n</li>\n<li><p>Why, if reordering for minimal slop is so simple, C compilers <strong>don’t do it automatically</strong>?</p>\n<ul>\n<li>Automatic reordering would <strong>interfere</strong> with a systems programmer’s ability to lay out structures that exactly match the byte and bit-level layout of memory-mapped device control block</li>\n<li> <strong>Rust</strong> makes the opposite choice; by default, its compiler <em>may</em> reorder structure fields.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-未完待续\"><a href=\"#8-未完待续\" class=\"headerlink\" title=\"8~ 未完待续\"></a>8~ 未完待续</h4>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ICS-53\"><a href=\"#ICS-53\" class=\"headerlink\" title=\"ICS-53\"></a>ICS-53</h1><h2 id=\"Struct\"><a href=\"#Struct\" class=\"headerlink\" title=\"Struct\"></a>Struct</h2><h3 id=\"lt-stdio-h-gt\"><a href=\"#lt-stdio-h-gt\" class=\"headerlink\" title=\"&lt;stdio.h&gt;\"></a>&lt;stdio.h&gt;</h3><h3 id=\"Strings-amp-lt-string-h-gt\"><a href=\"#Strings-amp-lt-string-h-gt\" class=\"headerlink\" title=\"Strings &amp; &lt;string.h&gt;\"></a>Strings &amp; &lt;string.h&gt;</h3><ul>\n<li><p>Copy</p>\n<ul>\n<li>strcpy</li>\n</ul>\n</li>\n<li><p>strlen</p>\n</li>\n<li><p>strchr ≈ python find()</p>\n</li>\n<li><p>loop</p>\n<ul>\n<li><code>for(char* i=line;*i;++i)</code><ul>\n<li>当<code>*i==\\EOF</code>时，即末尾时，停止</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Formatted strings</p>\n<ul>\n<li>int sscanf(char *string, char *format, …)</li>\n<li>int sprinf(char *buffer, char *format, …)</li>\n<li>all return the number of successful characters</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Structs\"><a href=\"#Structs\" class=\"headerlink\" title=\"Structs\"></a>Structs</h3><ul>\n<li>types can be defined<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span><span class=\"keyword\">int</span> x; <span class=\"keyword\">int</span> y&#125; Point; </span><br><span class=\"line\">Point p;</span><br><span class=\"line\">p.x = <span class=\"number\">0</span>; p.y =<span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure></li>\n<li>Overall size is sum of elements and paddings in between<ul>\n<li>```C<br>struct {<pre><code>char x;\nint y;\nchar z;\n</code></pre>\n} s1;<br>sizeof(s1) != 1+4+1 // == 12 = 4(char+padding=3)+4(int)+4(char+padding=3)<br>struct {<pre><code>char x,z;\nint y;\n</code></pre>\n} s2;<br>sizeof(s2) != 1+4+1 // == 8 = 4(char+char+padding=2)+4(int)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    - word alignment here</span><br><span class=\"line\">      - It benefits array</span><br><span class=\"line\">- can model real memory layout</span><br><span class=\"line\">```C</span><br><span class=\"line\">    typedef struct &#123;</span><br><span class=\"line\">        int a:2; //size in bits</span><br><span class=\"line\">        int b:1;</span><br><span class=\"line\">    &#125; Complex</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>bit fields</li>\n<li>Deferencing pointers to struct elements<ul>\n<li><code>(*structPtr).element</code></li>\n<li><code>structPtr-&gt;element</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Union\"><a href=\"#Union\" class=\"headerlink\" title=\"Union\"></a>Union</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">u</span>-<span class=\"title\">tag</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> iv</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>like structs</li>\n<li>occpy same memory space<ul>\n<li>无论读哪个element，都按头地址读</li>\n</ul>\n</li>\n<li>can hold different types at different times</li>\n<li>overall size is largest of elements</li>\n</ul>\n<h4 id=\"Memory-Pitfalls-常见错误\"><a href=\"#Memory-Pitfalls-常见错误\" class=\"headerlink\" title=\"Memory Pitfalls 常见错误\"></a>Memory Pitfalls 常见错误</h4><ul>\n<li>Dereferencing bad pointers<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> val;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,val); <span class=\"comment\">//should be &amp;val</span></span><br></pre></td></tr></table></figure></li>\n<li>Reading Uninitialized Memory<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *y = <span class=\"built_in\">malloc</span>(...)</span><br><span class=\"line\">y[<span class=\"number\">0</span>] += <span class=\"number\">1</span>; <span class=\"comment\">// 需要初始化 y[0]</span></span><br><span class=\"line\">```  </span><br><span class=\"line\">- Overwriting Memory</span><br><span class=\"line\">```C</span><br><span class=\"line\"><span class=\"keyword\">int</span> **p;</span><br><span class=\"line\">p = <span class=\"built_in\">malloc</span>(N*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;N;++i)</span><br><span class=\"line\">    p[i] = <span class=\"built_in\">malloc</span>(M*<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>))</span><br></pre></td></tr></table></figure></li>\n<li>referencing a pointer instend of value<ul>\n<li>should it be <code>*p</code> or just <code>p</code>?</li>\n</ul>\n</li>\n<li>referencing Nonexistent variables<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">helper</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;val; <span class=\"comment\">// 该内存返回时已经去掉</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>free one block multiple times</li>\n<li>referencing freed blocks</li>\n<li>failling to free allocated blocks</li>\n<li>free only parts of data structure<ul>\n<li>比如链表只free head</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"DEALING-with-bugs\"><a href=\"#DEALING-with-bugs\" class=\"headerlink\" title=\"DEALING with bugs\"></a>DEALING with bugs</h5><ul>\n<li>gdb</li>\n<li>Valgrind</li>\n<li>glibc mallloc contains checking code<ul>\n<li><code>setenv MALLOC_CHECK_ 3</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"The-Lost-Art-of-Structure-Packing-笔记\"><a href=\"#The-Lost-Art-of-Structure-Packing-笔记\" class=\"headerlink\" title=\"The Lost Art of Structure Packing 笔记\"></a>The Lost Art of Structure Packing 笔记</h3><ul>\n<li><a href=\"http://www.catb.org/esr/structure-packing/\">Link to the Article</a></li>\n<li>ASSUME x86 or ARM or any with <em>self-alignment</em></li>\n</ul>\n<h4 id=\"1-Who-should-read-this\"><a href=\"#1-Who-should-read-this\" class=\"headerlink\" title=\"1. Who should read this\"></a>1. Who should read this</h4><h4 id=\"2-Why-I-wrote-it\"><a href=\"#2-Why-I-wrote-it\" class=\"headerlink\" title=\"2. Why I wrote it\"></a>2. Why I wrote it</h4><h4 id=\"3-Alignment-requirement\"><a href=\"#3-Alignment-requirement\" class=\"headerlink\" title=\"3. Alignment requirement\"></a>3. Alignment requirement</h4><ul>\n<li> the way your compiler lays out basic datatypes in memory is constrained in order <strong>to make memory accesses faster</strong></li>\n<li>each type except char has an <em><strong>alignment requirement</strong></em>; <ul>\n<li> 任何type的地址都必须被<code>sizeof(type)</code>整除</li>\n<li> Ex: 2-byte shorts must start on an even address, </li>\n<li> 4-byte ints or floats must start on an address divisible by 4,</li>\n<li> <em>Signed or unsigned makes no difference</em></li>\n<li> The jargon for this is that basic C types on x86 and ARM are <em><strong>self-aligned</strong></em>. </li>\n<li> Pointers, whether 32-bit (4-byte) or 64-bit (8-byte) are <em>self-aligned</em> too.</li>\n</ul>\n</li>\n<li>Self-alignment makes access faster because it facilitates generating <em><strong>single-instruction fetches</strong></em> and puts of the typed data. </li>\n<li>on some <em><strong>older ones</strong></em> forcing your C program to violate alignment rules didn’t just slow your code down, it caused <strong>an illegal instruction fault</strong>. </li>\n<li>Also, self-alignment is <strong>not the only</strong> possible rule.</li>\n<li>NTP默认有alignment<ul>\n<li>platforms with padding rules other than self-alignment are <ul>\n<li>either nonexistent or </li>\n<li>confined to such specialized niches that they’re never either NTP servers or clients.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-Padding\"><a href=\"#4-Padding\" class=\"headerlink\" title=\"4. Padding\"></a>4. Padding</h4><p>In fact, the hidden assumption that the <em><strong>allocated order of static variables is their source order</strong></em> is not necessarily valid</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">s</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Here’s what actually happens. The storage for p starts on a self-aligned 4- or 8-byte boundary depending on the machine word size. This is <em><strong>pointer alignment</strong></em> - the strictest possible.<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *p;      <span class=\"comment\">/* 4 or 8 bytes */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c;       <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> pad[<span class=\"number\">3</span>];  <span class=\"comment\">/* 3 bytes */</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> x;        <span class=\"comment\">/* 4 bytes */</span></span><br></pre></td></tr></table></figure></li>\n<li>The <code>pad[3]</code> character array represents the fact that there are three bytes of <strong>waste space</strong> in the structure.  <ul>\n<li>The old-school term for this was “slop”. </li>\n<li>The value of the padding bits is <strong>undefined</strong>; <ul>\n<li>in particular <em><strong>it is not guaranteed that they will be zeroed</strong></em>.<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"keyword\">char</span> pad1[M];</span><br><span class=\"line\"><span class=\"keyword\">char</span> *p;</span><br><span class=\"line\"><span class=\"keyword\">char</span> pad2[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>what can we say about M and N?<ul>\n<li>First, in this case <code>N</code> will be zero</li>\n<li>The value of <code>M</code> is <strong>less predictable</strong>.<ul>\n<li><em>If the compiler happened to map c to the last byte of a machine word, the next byte (the first of p) would be the first byte of the next one and properly pointer-aligned. M would be zero.</em></li>\n<li>It is more likely that c will be mapped to the <strong>first byte of a machine word</strong>. In that case M will be whatever padding is needed to ensure that <strong>p has pointer alignment</strong> - 3 on a 32-bit machine, 7 on a 64-bit machine.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>On a platform with self-aligned types, <strong>arrays</strong> of char/short/int/long/pointer have <strong>no internal padding</strong>;<ul>\n<li>each member is automatically self-aligned at the end of the next one</li>\n</ul>\n</li>\n<li>same to <strong>Go structs</strong>, and to <strong>Rust structs with the “repr(C)” attribute</strong>, with only syntactic changes.</li>\n</ul>\n<h4 id=\"5-Structure-alignment-and-padding\"><a href=\"#5-Structure-alignment-and-padding\" class=\"headerlink\" title=\"5. Structure alignment and padding\"></a>5. Structure alignment and padding</h4><ul>\n<li>In general, a struct instance will have <em><strong>the alignment of its widest scalar member</strong></em>. <ul>\n<li>Compilers do this as the easiest way to <strong>ensure that all the members are self-aligned for fast access</strong>.</li>\n</ul>\n</li>\n<li>in C (and Go, and Rust) <strong>there is no leading padding</strong>.  <ul>\n<li>In C++ this may not be true; <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo1</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">/* On 64-bit sizeof(void *)==8 */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo1</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p;     <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;      <span class=\"comment\">/* 1 byte*/</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad[<span class=\"number\">7</span>]; <span class=\"comment\">/* 7 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> x;      <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Trailing-Padding\"><a href=\"#Trailing-Padding\" class=\"headerlink\" title=\"Trailing Padding\"></a>Trailing Padding</h4><ul>\n<li><p><strong>stride address of a structure</strong></p>\n<ul>\n<li>It is the first address following the structure data that has the same alignment as the structure.</li>\n</ul>\n</li>\n<li><p>The general rule of trailing structure padding is this: the compiler will behave as though the structure has trailing padding out to its stride address</p>\n</li>\n<li><p>If your structure has <strong>structure members</strong>, the inner structs want to have the alignment of <strong>longest scalar</strong> too</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5_inner</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p;</span><br><span class=\"line\">        <span class=\"keyword\">short</span> x;</span><br><span class=\"line\">    &#125; inner;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>The char *p member in the inner struct forces the <strong>outer struct to be pointer-aligned as well as the inner</strong></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;           <span class=\"comment\">/* 1 byte*/</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad1[<span class=\"number\">7</span>];     <span class=\"comment\">/* 7 bytes */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo5_inner</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> *p;      <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">        <span class=\"keyword\">short</span> x;      <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> pad2[<span class=\"number\">6</span>]; <span class=\"comment\">/* 6 bytes */</span></span><br><span class=\"line\">    &#125; inner;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>This structure gives us a hint of <strong>the savings that might be possible from repacking structures</strong>. <ul>\n<li>Of 24 bytes, 13 of them are padding. That’s more than 50% waste space!</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-Bitfields\"><a href=\"#6-Bitfields\" class=\"headerlink\" title=\"6. Bitfields\"></a>6. Bitfields</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo6</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flip:<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nybble:<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> septet:<span class=\"number\">7</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>What they give you the ability to do is declare structure fields of smaller than character width, down to 1 bit, like this.</p>\n</li>\n<li><p>The thing to know about bitfields is that they are implemented with word- and byte-level mask and rotate instructions operating on machine words, and <strong>cannot cross word boundaries</strong>.</p>\n<ul>\n<li>C99 guarentees that bit-fields will be packed as tightly as possible, provided they don’t cross storage unit boundaries</li>\n<li>This restriction is relaxed in C11 (6.7.2.1p11) and C++14 ([class.bit]p1); <ul>\n<li>It’s up to the implementation to decide;<ul>\n<li>GCC leaves it up to the ABI, which for x64 does prevent them from sharing an allocation unit.<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 32-bit machine */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo6</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> s;       <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;        <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> flip:<span class=\"number\">1</span>;    <span class=\"comment\">/* total 1 bit */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nybble:<span class=\"number\">4</span>;  <span class=\"comment\">/* total 5 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pad1:<span class=\"number\">3</span>;    <span class=\"comment\">/* pad to an 8-bit boundary */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> septet:<span class=\"number\">7</span>;  <span class=\"comment\">/* 7 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> pad2:<span class=\"number\">25</span>;   <span class=\"comment\">/* pad to 32 bits */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>As with normal structure padding, the padding bits <strong>are not guaranteed to be zero</strong>; C99 mentions this</p>\n</li>\n<li><p>The base type of a bit field is interpreted for <strong>signedness</strong> but not necessarily for <strong>size</strong>.</p>\n<ul>\n<li>It is up to implementors <ul>\n<li>whether “short flip:1” or “long flip:1” are supported, </li>\n<li>whether those base types change the size of the storage unit the field is packed into.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo7</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield:<span class=\"number\">31</span>;      <span class=\"comment\">/* 32-bit word 1 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo8</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield1:<span class=\"number\">31</span>;     <span class=\"comment\">/* 32-bit word 1 begins /*</span></span><br><span class=\"line\"><span class=\"comment\">    int littlefield1:1;</span></span><br><span class=\"line\"><span class=\"comment\">    int bigfield2:31;     /* 32-bit word 2 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield2:<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo9</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield1:<span class=\"number\">31</span>;     <span class=\"comment\">/* 32-bit word 1 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> bigfield2:<span class=\"number\">31</span>;     <span class=\"comment\">/* 32-bit word 2 begins */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield1:<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> littlefield2:<span class=\"number\">1</span>;   <span class=\"comment\">/* 32-bit word 3 begins */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Again, C11 and C++14 may pack <code>foo9</code> tighter, but it would perhaps be <em><strong>unwise</strong></em> to count on this.</li>\n</ul>\n<h4 id=\"7-Structure-reordering\"><a href=\"#7-Structure-reordering\" class=\"headerlink\" title=\"7. Structure reordering\"></a>7. Structure reordering</h4><ul>\n<li><p>The first thing to notice is that slop only happens in two places. </p>\n<ol>\n<li>One is where storage bound to a larger data type (with stricter alignment requirements) follows storage bound to a smaller one. </li>\n<li>The other is where a struct naturally ends before its stride address, requiring padding so the next one will be properly aligned</li>\n</ol>\n</li>\n<li><p>The simplest way to eliminate slop is to reorder the structure members by <strong>decreasing alignment</strong>. </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;          <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad1[<span class=\"number\">7</span>];    <span class=\"comment\">/* 7 bytes */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo10</span> *<span class=\"title\">p</span>;</span> <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;         <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad2[<span class=\"number\">6</span>];    <span class=\"comment\">/* 6 bytes */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>24 bytes TO 16 bytes</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> *<span class=\"title\">p</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">foo11</span> *<span class=\"title\">p</span>;</span> <span class=\"comment\">/* 8 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> x;         <span class=\"comment\">/* 2 bytes */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;          <span class=\"comment\">/* 1 byte */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> pad[<span class=\"number\">5</span>];     <span class=\"comment\">/* 5 bytes */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><p>Reordering is not guaranteed to produce saving</p>\n</li>\n<li><p>Curiously, strictly ordering your structure fields <strong>by increasing size</strong> also works to mimimize padding. </p>\n</li>\n<li><p>Why, if reordering for minimal slop is so simple, C compilers <strong>don’t do it automatically</strong>?</p>\n<ul>\n<li>Automatic reordering would <strong>interfere</strong> with a systems programmer’s ability to lay out structures that exactly match the byte and bit-level layout of memory-mapped device control block</li>\n<li> <strong>Rust</strong> makes the opposite choice; by default, its compiler <em>may</em> reorder structure fields.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-未完待续\"><a href=\"#8-未完待续\" class=\"headerlink\" title=\"8~ 未完待续\"></a>8~ 未完待续</h4>"},{"title":"WK01_DigitalCamera","date":"2022-01-09T09:12:27.000Z","_content":"","source":"_posts/WK01-DigitalCamera.md","raw":"---\ntitle: WK01_DigitalCamera\ndate: 2022-01-09 17:12:27\ntags:\n---\n","slug":"WK01-DigitalCamera","published":1,"updated":"2022-01-09T09:12:27.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky71gon50002j0rt8ic51bpc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"TIP-将hexo生成的博客网页放在Github.io子目录","date":"2021-12-21T11:34:11.000Z","_content":"\n## 将hexo生成的博客网页放在Github.io子目录 Put Hexo-Generated Blog Pages into Subdirectories of Github Pages\n\nHexo提供了一个方便快捷的静态博客生成框架。其对Markdown和Github Pages的兼容让人们可以轻松地在自己的github.io主页上搭建自己的博客。可是，我并不想让整个主页沦为一个简简单单的博客。博客只是主页的一部分，所以这里记录了如何将Hexo生成的博客网页放在一个给定的子目录里。\n\nHexo provides a convenient framework to build static blogs. Its compatibilities with Markdown and Github Pages allow people to easily deploy their blog on their github.io. However, I do not want the whole page only include one blog system. Blog may just be a part of the page. Therefore, here record the instructions on how to put Hexo-Generated blog contents into the target subdirectory.\n\n### 前提 Assumptions\n\n- 这里默认是按照Hexo官方文档英文版[Deployment>Github Pages](https://hexo.io/docs/github-pages)的方式，在Github Pages上部署Hexo框架的。  \n  - 其中主要运行了[peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages)，将Hexo在Github生成的`./public`目录下的内容`commit`到`master`或`main`主分支下。  \n  - 如果使用了官方文档中文版[部署>Github Pages](https://hexo.io/zh-cn/docs/github-pages.html)或是其他部署方式的话，可能需要进一步设置。\n\n- Here I assumed you had followed the instructions of Hexo's official documentation on [Deployment>Github Pages](https://hexo.io/docs/github-pages) to deploy your Hexo framework on Github Pages.\n  - It mainly utilizes [peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages) to commit the `./public` directory generated by Github to the `master` or `main` branch.\n  - If you used other methods, it may need further modifications.\n\n### Workflows, pages.yml, and actions-gh-pages\n\n在最后一步`Deploy`的`with`下增加参数`destination_dir`并填入你所要的子目录。  \nIn the final step `Deploy`, ADD the ARGument `destination_dir` with your target subdirectory INTO `with`.\n\n```yml\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n          publish_branch: master  # deploying branch\n```\n\n↓\n\n```yml\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n          destination_dir: ### <<<<< YOUR DESTINATION SUBDIR###\n          publish_branch: master  # deploying branch\n```\n\n### Hexo _config.yml\n\n- 编辑`_config.yml`：\n  - 将`_config.yml`中的`url`参数改为你所要的子目录绝对路径。\n  - 并将其相对路径添加成`root`参数。（建议在`url`下方添加）  \n\n- EDIT `_config.yml`:\n  - CHANGE `url` argument into the absolute url of your target subdir.\n  - ADD its relative url as the `root` argument.\n\n```yml\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://BUTLER36HUS.github.io/\n```\n\n↓\n\n```yml\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://BUTLER36HUS.github.io/YOUR DESTINATION SUBDIR\nroot: /YOUR DESTINATION SUBDIR/\n```\n\nDone!\n\n### 结尾 Final Words\n\n1. 如果之前已经在主分支下部署过Hexo的话，需要清理主分支，只保留新生成的子目录。\nIf you have already deployed Hexo before, you may need to clean your master/main branch and only keep the new generated subdirectory.\n2. 部署在子目录之后需要为其提供一定的入口。比方说，可以新建一个`index`并提供一个重定向超链接。 After deploying subdirectory, you need to provide certain entries for it. For example, you can create a new `index` and add a redirect link there.\n","source":"_posts/TIP-将hexo生成的博客网页放在Github-io子目录-Put-hexo-generated-blog-pages-into-subdirectories-of-Github-Pages.md","raw":"---\ntitle: >-\n  TIP-将hexo生成的博客网页放在Github.io子目录\ndate: 2021-12-21 19:34:11\ntags:\n---\n\n## 将hexo生成的博客网页放在Github.io子目录 Put Hexo-Generated Blog Pages into Subdirectories of Github Pages\n\nHexo提供了一个方便快捷的静态博客生成框架。其对Markdown和Github Pages的兼容让人们可以轻松地在自己的github.io主页上搭建自己的博客。可是，我并不想让整个主页沦为一个简简单单的博客。博客只是主页的一部分，所以这里记录了如何将Hexo生成的博客网页放在一个给定的子目录里。\n\nHexo provides a convenient framework to build static blogs. Its compatibilities with Markdown and Github Pages allow people to easily deploy their blog on their github.io. However, I do not want the whole page only include one blog system. Blog may just be a part of the page. Therefore, here record the instructions on how to put Hexo-Generated blog contents into the target subdirectory.\n\n### 前提 Assumptions\n\n- 这里默认是按照Hexo官方文档英文版[Deployment>Github Pages](https://hexo.io/docs/github-pages)的方式，在Github Pages上部署Hexo框架的。  \n  - 其中主要运行了[peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages)，将Hexo在Github生成的`./public`目录下的内容`commit`到`master`或`main`主分支下。  \n  - 如果使用了官方文档中文版[部署>Github Pages](https://hexo.io/zh-cn/docs/github-pages.html)或是其他部署方式的话，可能需要进一步设置。\n\n- Here I assumed you had followed the instructions of Hexo's official documentation on [Deployment>Github Pages](https://hexo.io/docs/github-pages) to deploy your Hexo framework on Github Pages.\n  - It mainly utilizes [peaceiris/actions-gh-pages](https://github.com/peaceiris/actions-gh-pages) to commit the `./public` directory generated by Github to the `master` or `main` branch.\n  - If you used other methods, it may need further modifications.\n\n### Workflows, pages.yml, and actions-gh-pages\n\n在最后一步`Deploy`的`with`下增加参数`destination_dir`并填入你所要的子目录。  \nIn the final step `Deploy`, ADD the ARGument `destination_dir` with your target subdirectory INTO `with`.\n\n```yml\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n          publish_branch: master  # deploying branch\n```\n\n↓\n\n```yml\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./public\n          destination_dir: ### <<<<< YOUR DESTINATION SUBDIR###\n          publish_branch: master  # deploying branch\n```\n\n### Hexo _config.yml\n\n- 编辑`_config.yml`：\n  - 将`_config.yml`中的`url`参数改为你所要的子目录绝对路径。\n  - 并将其相对路径添加成`root`参数。（建议在`url`下方添加）  \n\n- EDIT `_config.yml`:\n  - CHANGE `url` argument into the absolute url of your target subdir.\n  - ADD its relative url as the `root` argument.\n\n```yml\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://BUTLER36HUS.github.io/\n```\n\n↓\n\n```yml\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: http://BUTLER36HUS.github.io/YOUR DESTINATION SUBDIR\nroot: /YOUR DESTINATION SUBDIR/\n```\n\nDone!\n\n### 结尾 Final Words\n\n1. 如果之前已经在主分支下部署过Hexo的话，需要清理主分支，只保留新生成的子目录。\nIf you have already deployed Hexo before, you may need to clean your master/main branch and only keep the new generated subdirectory.\n2. 部署在子目录之后需要为其提供一定的入口。比方说，可以新建一个`index`并提供一个重定向超链接。 After deploying subdirectory, you need to provide certain entries for it. For example, you can create a new `index` and add a redirect link there.\n","slug":"TIP-将hexo生成的博客网页放在Github-io子目录-Put-hexo-generated-blog-pages-into-subdirectories-of-Github-Pages","published":1,"updated":"2021-12-21T12:19:03.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky71gon60003j0rt2t2g0g2v","content":"<h2 id=\"将hexo生成的博客网页放在Github-io子目录-Put-Hexo-Generated-Blog-Pages-into-Subdirectories-of-Github-Pages\"><a href=\"#将hexo生成的博客网页放在Github-io子目录-Put-Hexo-Generated-Blog-Pages-into-Subdirectories-of-Github-Pages\" class=\"headerlink\" title=\"将hexo生成的博客网页放在Github.io子目录 Put Hexo-Generated Blog Pages into Subdirectories of Github Pages\"></a>将hexo生成的博客网页放在Github.io子目录 Put Hexo-Generated Blog Pages into Subdirectories of Github Pages</h2><p>Hexo提供了一个方便快捷的静态博客生成框架。其对Markdown和Github Pages的兼容让人们可以轻松地在自己的github.io主页上搭建自己的博客。可是，我并不想让整个主页沦为一个简简单单的博客。博客只是主页的一部分，所以这里记录了如何将Hexo生成的博客网页放在一个给定的子目录里。</p>\n<p>Hexo provides a convenient framework to build static blogs. Its compatibilities with Markdown and Github Pages allow people to easily deploy their blog on their github.io. However, I do not want the whole page only include one blog system. Blog may just be a part of the page. Therefore, here record the instructions on how to put Hexo-Generated blog contents into the target subdirectory.</p>\n<h3 id=\"前提-Assumptions\"><a href=\"#前提-Assumptions\" class=\"headerlink\" title=\"前提 Assumptions\"></a>前提 Assumptions</h3><ul>\n<li><p>这里默认是按照Hexo官方文档英文版<a href=\"https://hexo.io/docs/github-pages\">Deployment&gt;Github Pages</a>的方式，在Github Pages上部署Hexo框架的。  </p>\n<ul>\n<li>其中主要运行了<a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a>，将Hexo在Github生成的<code>./public</code>目录下的内容<code>commit</code>到<code>master</code>或<code>main</code>主分支下。  </li>\n<li>如果使用了官方文档中文版<a href=\"https://hexo.io/zh-cn/docs/github-pages.html\">部署&gt;Github Pages</a>或是其他部署方式的话，可能需要进一步设置。</li>\n</ul>\n</li>\n<li><p>Here I assumed you had followed the instructions of Hexo’s official documentation on <a href=\"https://hexo.io/docs/github-pages\">Deployment&gt;Github Pages</a> to deploy your Hexo framework on Github Pages.</p>\n<ul>\n<li>It mainly utilizes <a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a> to commit the <code>./public</code> directory generated by Github to the <code>master</code> or <code>main</code> branch.</li>\n<li>If you used other methods, it may need further modifications.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Workflows-pages-yml-and-actions-gh-pages\"><a href=\"#Workflows-pages-yml-and-actions-gh-pages\" class=\"headerlink\" title=\"Workflows, pages.yml, and actions-gh-pages\"></a>Workflows, pages.yml, and actions-gh-pages</h3><p>在最后一步<code>Deploy</code>的<code>with</code>下增加参数<code>destination_dir</code>并填入你所要的子目录。<br>In the final step <code>Deploy</code>, ADD the ARGument <code>destination_dir</code> with your target subdirectory INTO <code>with</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br><span class=\"line\">    <span class=\"attr\">publish_branch:</span> <span class=\"string\">master</span>  <span class=\"comment\"># deploying branch</span></span><br></pre></td></tr></table></figure>\n\n<p>↓</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br><span class=\"line\">    <span class=\"attr\">destination_dir:</span> <span class=\"comment\">### &lt;&lt;&lt;&lt;&lt; YOUR DESTINATION SUBDIR###</span></span><br><span class=\"line\">    <span class=\"attr\">publish_branch:</span> <span class=\"string\">master</span>  <span class=\"comment\"># deploying branch</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo-config-yml\"><a href=\"#Hexo-config-yml\" class=\"headerlink\" title=\"Hexo _config.yml\"></a>Hexo _config.yml</h3><ul>\n<li><p>编辑<code>_config.yml</code>：</p>\n<ul>\n<li>将<code>_config.yml</code>中的<code>url</code>参数改为你所要的子目录绝对路径。</li>\n<li>并将其相对路径添加成<code>root</code>参数。（建议在<code>url</code>下方添加）  </li>\n</ul>\n</li>\n<li><p>EDIT <code>_config.yml</code>:</p>\n<ul>\n<li>CHANGE <code>url</code> argument into the absolute url of your target subdir.</li>\n<li>ADD its relative url as the <code>root</code> argument.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://BUTLER36HUS.github.io/</span></span><br></pre></td></tr></table></figure>\n\n<p>↓</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://BUTLER36HUS.github.io/YOUR</span> <span class=\"string\">DESTINATION</span> <span class=\"string\">SUBDIR</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/YOUR</span> <span class=\"string\">DESTINATION</span> <span class=\"string\">SUBDIR/</span></span><br></pre></td></tr></table></figure>\n\n<p>Done!</p>\n<h3 id=\"结尾-Final-Words\"><a href=\"#结尾-Final-Words\" class=\"headerlink\" title=\"结尾 Final Words\"></a>结尾 Final Words</h3><ol>\n<li>如果之前已经在主分支下部署过Hexo的话，需要清理主分支，只保留新生成的子目录。<br>If you have already deployed Hexo before, you may need to clean your master/main branch and only keep the new generated subdirectory.</li>\n<li>部署在子目录之后需要为其提供一定的入口。比方说，可以新建一个<code>index</code>并提供一个重定向超链接。 After deploying subdirectory, you need to provide certain entries for it. For example, you can create a new <code>index</code> and add a redirect link there.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"将hexo生成的博客网页放在Github-io子目录-Put-Hexo-Generated-Blog-Pages-into-Subdirectories-of-Github-Pages\"><a href=\"#将hexo生成的博客网页放在Github-io子目录-Put-Hexo-Generated-Blog-Pages-into-Subdirectories-of-Github-Pages\" class=\"headerlink\" title=\"将hexo生成的博客网页放在Github.io子目录 Put Hexo-Generated Blog Pages into Subdirectories of Github Pages\"></a>将hexo生成的博客网页放在Github.io子目录 Put Hexo-Generated Blog Pages into Subdirectories of Github Pages</h2><p>Hexo提供了一个方便快捷的静态博客生成框架。其对Markdown和Github Pages的兼容让人们可以轻松地在自己的github.io主页上搭建自己的博客。可是，我并不想让整个主页沦为一个简简单单的博客。博客只是主页的一部分，所以这里记录了如何将Hexo生成的博客网页放在一个给定的子目录里。</p>\n<p>Hexo provides a convenient framework to build static blogs. Its compatibilities with Markdown and Github Pages allow people to easily deploy their blog on their github.io. However, I do not want the whole page only include one blog system. Blog may just be a part of the page. Therefore, here record the instructions on how to put Hexo-Generated blog contents into the target subdirectory.</p>\n<h3 id=\"前提-Assumptions\"><a href=\"#前提-Assumptions\" class=\"headerlink\" title=\"前提 Assumptions\"></a>前提 Assumptions</h3><ul>\n<li><p>这里默认是按照Hexo官方文档英文版<a href=\"https://hexo.io/docs/github-pages\">Deployment&gt;Github Pages</a>的方式，在Github Pages上部署Hexo框架的。  </p>\n<ul>\n<li>其中主要运行了<a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a>，将Hexo在Github生成的<code>./public</code>目录下的内容<code>commit</code>到<code>master</code>或<code>main</code>主分支下。  </li>\n<li>如果使用了官方文档中文版<a href=\"https://hexo.io/zh-cn/docs/github-pages.html\">部署&gt;Github Pages</a>或是其他部署方式的话，可能需要进一步设置。</li>\n</ul>\n</li>\n<li><p>Here I assumed you had followed the instructions of Hexo’s official documentation on <a href=\"https://hexo.io/docs/github-pages\">Deployment&gt;Github Pages</a> to deploy your Hexo framework on Github Pages.</p>\n<ul>\n<li>It mainly utilizes <a href=\"https://github.com/peaceiris/actions-gh-pages\">peaceiris/actions-gh-pages</a> to commit the <code>./public</code> directory generated by Github to the <code>master</code> or <code>main</code> branch.</li>\n<li>If you used other methods, it may need further modifications.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Workflows-pages-yml-and-actions-gh-pages\"><a href=\"#Workflows-pages-yml-and-actions-gh-pages\" class=\"headerlink\" title=\"Workflows, pages.yml, and actions-gh-pages\"></a>Workflows, pages.yml, and actions-gh-pages</h3><p>在最后一步<code>Deploy</code>的<code>with</code>下增加参数<code>destination_dir</code>并填入你所要的子目录。<br>In the final step <code>Deploy</code>, ADD the ARGument <code>destination_dir</code> with your target subdirectory INTO <code>with</code>.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br><span class=\"line\">    <span class=\"attr\">publish_branch:</span> <span class=\"string\">master</span>  <span class=\"comment\"># deploying branch</span></span><br></pre></td></tr></table></figure>\n\n<p>↓</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span></span><br><span class=\"line\">  <span class=\"attr\">uses:</span> <span class=\"string\">peaceiris/actions-gh-pages@v3</span></span><br><span class=\"line\">  <span class=\"attr\">with:</span></span><br><span class=\"line\">    <span class=\"attr\">github_token:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.GITHUB_TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">    <span class=\"attr\">publish_dir:</span> <span class=\"string\">./public</span></span><br><span class=\"line\">    <span class=\"attr\">destination_dir:</span> <span class=\"comment\">### &lt;&lt;&lt;&lt;&lt; YOUR DESTINATION SUBDIR###</span></span><br><span class=\"line\">    <span class=\"attr\">publish_branch:</span> <span class=\"string\">master</span>  <span class=\"comment\"># deploying branch</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hexo-config-yml\"><a href=\"#Hexo-config-yml\" class=\"headerlink\" title=\"Hexo _config.yml\"></a>Hexo _config.yml</h3><ul>\n<li><p>编辑<code>_config.yml</code>：</p>\n<ul>\n<li>将<code>_config.yml</code>中的<code>url</code>参数改为你所要的子目录绝对路径。</li>\n<li>并将其相对路径添加成<code>root</code>参数。（建议在<code>url</code>下方添加）  </li>\n</ul>\n</li>\n<li><p>EDIT <code>_config.yml</code>:</p>\n<ul>\n<li>CHANGE <code>url</code> argument into the absolute url of your target subdir.</li>\n<li>ADD its relative url as the <code>root</code> argument.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://BUTLER36HUS.github.io/</span></span><br></pre></td></tr></table></figure>\n\n<p>↓</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># URL</span></span><br><span class=\"line\"><span class=\"comment\">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">http://BUTLER36HUS.github.io/YOUR</span> <span class=\"string\">DESTINATION</span> <span class=\"string\">SUBDIR</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/YOUR</span> <span class=\"string\">DESTINATION</span> <span class=\"string\">SUBDIR/</span></span><br></pre></td></tr></table></figure>\n\n<p>Done!</p>\n<h3 id=\"结尾-Final-Words\"><a href=\"#结尾-Final-Words\" class=\"headerlink\" title=\"结尾 Final Words\"></a>结尾 Final Words</h3><ol>\n<li>如果之前已经在主分支下部署过Hexo的话，需要清理主分支，只保留新生成的子目录。<br>If you have already deployed Hexo before, you may need to clean your master/main branch and only keep the new generated subdirectory.</li>\n<li>部署在子目录之后需要为其提供一定的入口。比方说，可以新建一个<code>index</code>并提供一个重定向超链接。 After deploying subdirectory, you need to provide certain entries for it. For example, you can create a new <code>index</code> and add a redirect link there.</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}